@inject IEnterpriseWarehouseApiWrapper EnterpriseWarehouseApi

<Modal @ref="CellModal">
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Изменить ячейку</ModalTitle>
                <CloseButton Clicked="CloseCellModalAsync" />
            </ModalHeader>

            <ModalBody>
                @if (CellToUpdate != null)
                {
                    <Field>
                        <FieldLabel>Выберите товар</FieldLabel>
                        <Select TValue="int" @bind-SelectedValue="CellToUpdate!.ProductId">
                            @if (Products != null)
                            {
                                @foreach (var product in Products)
                                {
                                    <SelectItem Value="@product.Id">@($"{product.Id} | {product.Name} | {product.Code}")</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Количество товара</FieldLabel>
                            <InputNumber @bind-Value="CellToUpdate.Quantity" />
                    </Field>
                }
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCellModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="UpdateCellAsync">Изменить</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnCellUpdated { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public CellCreateDTO? CellToUpdate { get; set; }
    private IEnumerable<ProductDTO>? Products { get; set; }
    private Modal CellModal { get; set; } = new();

    public async Task Show()
    {
        await LoadProductsAsync();
        await CellModal.Show();
    }

    private async Task CloseCellModalAsync()
    {
        CellToUpdate = new();
        await CellModal.Hide();
    }

    private async Task LoadProductsAsync()
    {
        Products = await EnterpriseWarehouseApi.GetAllProducts();
    }

    private async Task UpdateCellAsync()
    {
        await EnterpriseWarehouseApi.UpdateCell(Id, CellToUpdate!);
        CellToUpdate = new();
        await CellModal.Hide();
        await OnCellUpdated.InvokeAsync();
    }
}
