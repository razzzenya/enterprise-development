@inject IEnterpriseWarehouseApiWrapper EnterpriseWarehouseApi

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Организации</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="OrganizationDTO"
                  Data="Organizations"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="OrganizationDTO"
                                Field="@nameof(OrganizationDTO.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteOrganizationAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="OrganizationDTO"
                                Field="@nameof(OrganizationDTO.Id)"
                                Caption="Идентификатор организации">
                </DataGridColumn>
                <DataGridColumn TItem="OrganizationDTO"
                                Field="@nameof(OrganizationDTO.Name)"
                                Caption="Название">
                </DataGridColumn>
                <DataGridColumn TItem="OrganizationDTO"
                                Field="@nameof(OrganizationDTO.Address)"
                                Caption="Адрес">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<OrganizationCreateModal @ref="OrganizationCreateModal" OnOrganizationAdded="@HandleOrganizationListChanged" />
<OrganizationUpdateModal @ref="OrganizationUpdateModal" OrganizationToUpdate="SelectedOrganization" Id="SelectedId" OnOrganizationUpdated="@HandleOrganizationListChanged" />


@code {
    private IEnumerable<OrganizationDTO> Organizations { get; set; } = [];
    private int SelectedId { get; set; }
    private OrganizationCreateDTO? SelectedOrganization { get; set; }
    private OrganizationCreateModal OrganizationCreateModal { get; set; } = new();
    private OrganizationUpdateModal OrganizationUpdateModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshOrganizationCollection();
        await base.OnInitializedAsync();
    }

    private async Task OpenEditPageAsync(OrganizationDTO context)
    {
        SelectedId = context.Id;
        SelectedOrganization = new()
            {
                Name = context.Name,
                Address = context.Address
            };
        await OrganizationUpdateModal.Show();
    }

    private async Task DeleteOrganizationAsync(OrganizationDTO context)
    {
        await EnterpriseWarehouseApi.DeleteOrganization(context.Id);
        await RefreshOrganizationCollection();
    }

    private async Task HandleOrganizationListChanged()
    {
        await RefreshOrganizationCollection();
    }

    private async Task OpenCreateModal() => await OrganizationCreateModal.Show();

    private async Task RefreshOrganizationCollection() => Organizations = await EnterpriseWarehouseApi.GetAllOrganizations();
}
